（完整版）
一、全局安装gulp，分步骤解析

1、下载安装nodejs 
2、全局安装gulp
   npm install gulp -g 或者cnpm install gulp -g

3、生成项目所需信息文件package.json（项目名不能是大写）
   cmd窗口进入gulpproject目录（可参考附件）,输入命令npm init，一路按enter完成后自动生成package.json文件。
   示例package.json
         {
        "name": "webapp",
        "version": "1.0.0",
        "description": "",
        "main": "index.js",
        "scripts": {
          "test": "echo \"Error: no test specified\" && exit 1"
        },
        "author": "",
        "license": "ISC",
        "devDependencies": {
          "del": "^3.0.0",
          "gulp": "^3.9.1",
          "gulp-cssnano": "^2.1.2",
          "gulp-uglify": "^3.0.0"
        }
      }
      
   完整的package.json文件如下：可以自己先配好，每次使用直接拿来复用
         {
        "name": "webapp",
        "version": "1.0.0",
        "description": "",
        "main": "index.js",
        "dependencies": {
          "del": "^1.1.1",
          "gulp": "^3.8.10",
          "gulp-concat": "^2.4.3",
          "gulp-merge": "^0.1.0",
          "gulp-jshint": "^1.9.0",
          "gulp-minify-css": "^0.3.12",
          "gulp-minify-html": "^0.1.8",
          "gulp-ng-annotate": "^0.4.3",
          "gulp-ng-template": "^0.1.1",
          "gulp-sequence": "^0.3.1",
          "gulp-uglify": "^1.0.2",
          "gulp-util": "^3.0.2"
        },
        "devDependencies": {},
        "scripts": {
          "test": "echo \"Error: no test specified\" && exit 1"
        },
        "keywords": [
          "nodes"
        ],
        "author": "Zan",
        "license": "MIT"
      }


4、项目根目录下安装gulp
   全局安装gulp后，还需要在每个要使用gulp的项目中都单独安装一次。完成后会生成node_modules文件夹。
   npm install gulp --save-dev

详细解释命令：
  (1) npm install <name>   
        会把插件安装到node_modules目录中
  (2) 参数 --save
        会在package.json的dependencies属性下添加该插件
  (3) 参数 --save-dev:
        会在package.json的devDependencies属性下添加添加该插件
  (4) 参数 -g
        全局安装插件
  (5) npm install
    会安装package.json下dependencies和 devDependencies声明的插件
  (6) 使用原则:
    运行时需要用到的包使用--save，否则使用--save-dev。
    
5、安装项目所需自动化插件
   #安装gulp-uglify（压缩js插件）
     npm install gulp-uglify --save-dev
   #安装gulp- image（压缩image插件）
     npm install gulp-image --save-dev
   #安装gulp-cssnano（压缩css插件）
     npm install gulp-cssnano --save-dev
   #安装del
     npm install del --save-dev
     
     
    "del": "^1.1.1",
    "gulp": "^3.8.10",
    "gulp-concat": "^2.4.3",
    "gulp-merge": "^0.1.0",
    "gulp-jshint": "^1.9.0",
    "gulp-minify-css": "^0.3.12",
    "gulp-minify-html": "^0.1.8",
    "gulp-ng-annotate": "^0.4.3",
    "gulp-ng-template": "^0.1.1",
    "gulp-sequence": "^0.3.1",
    "gulp-uglify": "^1.0.2",
    "gulp-util": "^3.0.2"
    
    

6、配置项目的gulpfile.js

'use strict';

var _require
try {
    _require = require('./util').getNPM
} catch(e) {
    _require = require
}

var gulp = _require('gulp'),
    gutil = _require('gulp-util'),
    gulpSequence = _require('gulp-sequence').use(gulp),
    del = _require('del'),
	jshint = _require('gulp-jshint'),
	uglify = _require('gulp-uglify'),
    concat = _require('gulp-concat'),
    merge = _require('gulp-merge'),
	autoprefixer = _require('gulp-autoprefixer'),
    minifyHtml = _require('gulp-minify-html'),
    minifyCss = _require('gulp-minify-css'),
	//imagemin = _require('gulp-imagemin'),
    ngAnnotate = _require('gulp-ng-annotate'),
	cache = _require('gulp-cache'),
    //livereload = _require('gulp-livereload'),
	//pngquant = _require('imagemin-pngquant'),
    ngTemplate = _require('gulp-ng-template');

var destPath = "app/build";

gulp.task('clean',function(cb){
  del([destPath+'/**/*.*'], {force:true}, cb);
});


gulp.task('jshint', function () {
     gulp.src(['js/** /*.js'])
        .pipe(jshint())
        .pipe(jshint.reporter())
        .pipe(jshint.reporter('fail'));
});

gulp.task('images', function () {
    gulp.src(['theme/default/images/** /*.*'])
        .pipe(gulp.dest(destPath + '/images/'));
});

gulp.task('js', function () {
   return gulp.src(['app/js/* /*.js'])
      .pipe(jshint())
      .pipe(jshint.reporter('default'))
      .pipe(uglify())
      .pipe(concat('app.js'))
      .pipe(gulp.dest(destPath));
});


gulp.task('concat-js', function () {
    merge(
        gulp.src(['app/js/app.js', 'app/js/**/*.js']),
        gulp.src(['app/partials/*.html'])
            .pipe(minifyHtml({empty: true, quotes: true}))
			.pipe(ngTemplate({
                moduleName: 'singleview',
                prefix: 'partials/'
            }))
    )
    /*
	.pipe(jshint())
	.pipe(jshint.reporter('default'))
	.pipe(ngAnnotate({single_quotes: true}))
	.pipe(uglify())
	*/
	.pipe(concat('all.js'))
	.pipe(gulp.dest(destPath))
});

gulp.task('css', function() {
    gulp.src('theme/default/css/*.css')
		.pipe(rename({ suffix: '.min' }))
		.pipe(minifycss())
		.pipe(gulp.dest(destPath))
});

/*
gulp.task('images', function () {
    gulp.src('theme/default/images/** /*.{png,jpg,gif,ico}')
        .pipe(cache(imagemin({
            progressive: true,
            svgoPlugins: [{removeViewBox: false}],
            use: [pngquant()] 
        })))
        .pipe(gulp.dest(destPath + "/images"));
});
*/

gulp.task('default', gulpSequence(['clean', 'jshint','concat-js']));

//logEvents(gulp)
process.nextTick(function () {
    gulp.start.call(gulp, 'default')
})

function logEvents(gulpInst) {
    gulpInst.on('err', function () {
        failed = true;
    });

    gulpInst.on('task_start', function (e) {
        // TODO: batch these
        // so when 5 tasks start at once it only logs one time with all 5
        gutil.log('Starting', '\'' + gutil.colors.cyan(e.task) + '\'...');
    });

    gulpInst.on('task_stop', function (e) {
        gutil.log(
            'Finished', '\'' + gutil.colors.cyan(e.task) + '\'',
            'after', gutil.colors.magenta(formatTime(e.hrDuration))
        );
    });

    gulpInst.on('task_err', function (e) {
        var msg = e.err || e.message || 'error'
        gutil.log(
            '\'' + gutil.colors.cyan(e.task) + '\'',
            gutil.colors.red('errored after'),
            gutil.colors.magenta(formatTime(e.hrDuration))
        );
        gutil.log(msg);
    });

    gulpInst.on('task_not_found', function (err) {
        gutil.log(
            gutil.colors.red('Task \'' + err.task + '\' is not in your gulpfile')
        );
        gutil.log('Please check the documentation for proper gulpfile formatting');
        process.exit(1);
    });
}

function formatTime(time) {
    var totalSeconds = time[0] + time[1] / 1e9;
    return (totalSeconds * 1000).toPrecision(9) + 'ms'
}



二、gulp安装（初始版）
gulp.js打包工具安装：

（安装之后才可以打包所有的js并完成效果的实现，否则修改之后的js不起作用）

1.获取到cmp和node.js
2.修改cmp里边的gulpfile.js里的地址为本地项目首页所在地址：
gulp.task('clean',function(cb){
  del(['D:/svn/src/main/webapp/dist/*/', 'D:/svn/src/main/webapp/dist/*.*'], {force:true}, cb);
});
3.在dos里输入（node -v）查询node.js的版本
4.在dos里进入到当前项目首页所在的目录：例如  D:/svn/src/main/webapp
5.把package.json放入到D:/svn/src/main/webapp下，执行npm install，会在当前文件夹下生成一个node-modules的文件夹。
6.nmp install -g gulp
7.执行gulp
8.每修改一次js都要编译一次，把app.js重新上传覆盖，也就是输入一次gulp

步骤：
1、package.json放到webapp下
2、执行npm install（会生成）个node-modules的文件夹
3、nmp install -g gulp（全局安装gulp）
4、修改gulpfile.js文件，
如下：
'use strict';

var gulp = require('gulp'),
    gulpSequence = require('gulp-sequence').use(gulp),
    del = require('del'),
    jshint = require('gulp-jshint'),
    concat = require('gulp-concat');

gulp.task('clean',function(cb){
  del(['dist/*/', 'dist/*.*'], {force:true}, cb);
});

gulp.task('jshint', function () {
    gulp.src(['app/**/*.js'])
        .pipe(jshint())
        .pipe(jshint.reporter())
        .pipe(jshint.reporter('fail'));
});

gulp.task('concat', function(){
    gulp.src(['app/**/module.js', 'app/**/*.js'])
        .pipe(concat('app.js'))
        .pipe(gulp.dest('dist/'));
});

gulp.task('default', gulpSequence('clean', 'jshint', 'concat'));
5、gulp编译











